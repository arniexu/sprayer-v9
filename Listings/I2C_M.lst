C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE I2C_M
OBJECT MODULE PLACED IN .\Objects\I2C_M.obj
COMPILER INVOKED BY: D:\tool chain\keil c51 v6\C51\BIN\C51.EXE Application\I2C_M.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(.\Device\Include;.\StdDriver\inc;.\RTX Tiny2\inc;.\TM1650;.\Application) DEFINE(FOSC_240000) DEBUG OBJECTEXTEND SYMBOLS
                    - PRINT(.\Listings\I2C_M.lst) TABS(2) OBJECT(.\Objects\I2C_M.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2020 nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/29/2020
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: MS51 I2C master mode demo code, the Slave address = 0xA4
  16          //
  17          //   ____________            _____________ 
  18          //  |            |   SDA    |             |
  19          //  |            |<-------->|             |
  20          //  |            |          |             |
  21          //  |MS51(M)     |          | MS51(S)     |
  22          //  |(I2C_Master)|          | (I2C_Slave) |
  23          //  |            |   SCL    |             |
  24          //  |            |--------->|             |
  25          //  |____________|          |_____________|
  26          //
  27          //  The protocol of I2C is master: start -> write 10 byte(ACK) ->stop -> start ->read 10 byte(ACK) -> stop
  28          //********************************************************************************************************
             -***
  29          
  30          #include  "I2C_M.h"
  31          #include <stdlib.h>
  32          #include <stdio.h>
  33          
  34          #define I2C_CLOCK                 13
  35          #define DIG0_ADDRESS              0x34
  36          #define DIG1_ADDRESS              0x6A
  37          #define DIG2_ADDRESS              0x6C
  38          #define DIG3_ADDRESS              0x6E
  39          
  40          #define I2C_WR                    0
  41          #define I2C_RD                    1
  42          
  43          #define LOOP_SIZE                 1
  44          
C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 2   

  45          //========================================================================================================
  46          void Init_I2C(unsigned long u32SYSCLK, unsigned long u32I2CCLK)
  47          {
  48   1          P13_OPENDRAIN_MODE;
  49   1          P14_OPENDRAIN_MODE;
  50   1          clr_I2CON_I2CPX;
  51   1      
  52   1          /* Set I2C clock rate */
  53   1          I2CLK = (u32SYSCLK/4/u32I2CCLK-1); 
  54   1          /* Enable I2C */
  55   1          set_I2CON_I2CEN;                                   
  56   1      }
  57          //========================================================================================================
  58          void I2C_Error(void)
  59          {
  60   1          // do not wait forever 
  61   1          printf("error in i2c comms.\n\r");
  62   1          return;
  63   1      }
  64          //--------------------------------------------------------------------------------------------
  65          //----  Address Write----------------------------------------------------------------------------
  66          //--------------------------------------------------------------------------------------------
  67          void I2C_Write_Addr(UINT8 u8Addr){
  68   1          /* Write Step1 */
  69   1          set_I2CON_STA;                                    /* Send Start bit to I2C EEPROM */
  70   1          clr_I2CON_SI;
  71   1          while (!SI);                                /*Check SI set or not  */
  72   1          if (I2STAT != 0x08)                         /*Check status value after every step   */
  73   1              I2C_Error();
  74   1          
  75   1          /* Write Step2 */
  76   1          clr_I2CON_STA;                                    /*STA=0*/
  77   1          I2DAT = (u8Addr | I2C_WR);
  78   1          clr_I2CON_SI;
  79   1          while (!SI);                                /*Check SI set or not */
  80   1          if (I2STAT != 0x18)              
  81   1              I2C_Error();
  82   1      
  83   1          /* Write Step3 */
  84   1          set_I2CON_STO;
  85   1          clr_I2CON_SI;
  86   1          while (STO);                                /* Check STOP signal */
  87   1        }
  88          
  89          //--------------------------------------------------------------------------------------------
  90          //----  Byte Write----------------------------------------------------------------------------
  91          //--------------------------------------------------------------------------------------------
  92          void I2C_Write_Byte(UINT8 u8Addr, UINT8 u8DAT)
  93          {
  94   1          unsigned char  u8Count;
  95   1          /* Write Step1 */
  96   1          set_I2CON_STA;                                    /* Send Start bit to I2C EEPROM */
  97   1          clr_I2CON_SI;
  98   1          while (!SI);                                /*Check SI set or not  */
  99   1          if (I2STAT != 0x08)                         /*Check status value after every step   */
 100   1              I2C_Error();
 101   1          
 102   1          /* Write Step2 */
 103   1          clr_I2CON_STA;                                    /*STA=0*/
 104   1          I2DAT = (u8Addr | I2C_WR);
 105   1          clr_I2CON_SI;
 106   1          while (!SI);                                /*Check SI set or not */
C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 3   

 107   1          if (I2STAT != 0x18)              
 108   1              I2C_Error();
 109   1      
 110   1          /* Write Step3 */
 111   1          for (u8Count = 0; u8Count < 1; u8Count++)
 112   1          {
 113   2              I2DAT = u8DAT;
 114   2              clr_I2CON_SI;
 115   2              while (!SI);                            /*Check SI set or not*/
 116   2              if (I2STAT != 0x28)              
 117   2                  I2C_Error();
 118   2      
 119   2              u8DAT = ~u8DAT;        
 120   2          }
 121   1      
 122   1          /* Write Step4 */
 123   1          set_I2CON_STO;
 124   1          clr_I2CON_SI;
 125   1          while (STO);                                /* Check STOP signal */
 126   1        }
 127          
 128            
 129          void I2C_Write_Word(UINT8 u8Addr, UINT8 u8DAT[], UINT8 siz)
 130          {
 131   1          unsigned char  u8Count;
 132   1          /* Write Step1 */
 133   1          set_I2CON_STA;                                    /* Send Start bit to I2C EEPROM */
 134   1          clr_I2CON_SI;
 135   1          while (!SI);                                /*Check SI set or not  */
 136   1          if (I2STAT != 0x08)                         /*Check status value after every step   */
 137   1              I2C_Error();
 138   1          
 139   1          /* Write Step2 */
 140   1          clr_I2CON_STA;                                    /*STA=0*/
 141   1          I2DAT = (u8Addr | I2C_WR);
 142   1          clr_I2CON_SI;
 143   1          while (!SI);                                /*Check SI set or not */
 144   1          if (I2STAT != 0x18)              
 145   1              I2C_Error();
 146   1      
 147   1          /* Write Step3 */
 148   1          for (u8Count = 0; u8Count < siz; u8Count++)
 149   1          {
 150   2              I2DAT = u8DAT[u8Count]  ;
 151   2              clr_I2CON_SI;
 152   2              while (!SI);                            /*Check SI set or not*/
 153   2              if (I2STAT != 0x28)              
 154   2                  I2C_Error();
 155   2      
 156   2              u8DAT[u8Count] = ~u8DAT[u8Count];        
 157   2          }
 158   1      
 159   1          /* Write Step4 */
 160   1          set_I2CON_STO;
 161   1          clr_I2CON_SI;
 162   1          while (STO);                                /* Check STOP signal */
 163   1        }
 164          //--------------------------------------------------------------------------------------------
 165          //----  Byte Read ----------------------------------------------------------------------------
 166          //--------------------------------------------------------------------------------------------
 167          UINT8 I2C_Read_Byte(UINT8 u8Addr)
 168          {
C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 4   

 169   1          unsigned char  u8Data = 0;
 170   1          unsigned char  u8Count;
 171   1          /* Read Step1 */
 172   1          set_I2CON_STA;
 173   1          clr_I2CON_SI;          
 174   1          while (!SI);                                //Check SI set or not
 175   1          if (I2STAT != 0x08)                         //Check status value after every step
 176   1              I2C_Error();
 177   1      
 178   1          /* Step13 */
 179   1          clr_I2CON_STA;                                    //STA needs to be cleared after START codition is ge
             -nerated
 180   1          I2DAT = (u8Addr | I2C_RD);
 181   1          clr_I2CON_SI;
 182   1          while (!SI);                                //Check SI set or not
 183   1          if (I2STAT != 0x40)              
 184   1              I2C_Error();
 185   1          
 186   1          /* Step14 */
 187   1          for (u8Count = 0; u8Count <1; u8Count++)
 188   1          {
 189   2              set_I2CON_AA;
 190   2              clr_I2CON_SI;        
 191   2              while (!SI);                            //Check SI set or not
 192   2      
 193   2              if (I2STAT != 0x50)              
 194   2                  I2C_Error();
 195   2              
 196   2              u8Data = I2DAT;
 197   2          } 
 198   1          
 199   1          /* Step15 */
 200   1          clr_I2CON_AA;
 201   1          clr_I2CON_SI;
 202   1          while (!SI);                                //Check SI set or not
 203   1          if (I2STAT != 0x58)              
 204   1              I2C_Error();
 205   1      
 206   1          /* Step16 */
 207   1          set_I2CON_STO;
 208   1          clr_I2CON_SI;
 209   1          while (STO);                                /* Check STOP signal */ 
 210   1          return u8Data;
 211   1      }
 212          //========================================================================================================
 213          
 214          
C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 5   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P1M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
AA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
PWMCON0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
_I2C_Write_Addr. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  u8Addr . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_I2C_Read_Byte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  u8Addr . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  u8Data . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  u8Count. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
TA . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
_I2C_Write_Byte. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  u8Addr . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  u8DAT. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  u8Count. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
UINT32 . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
UINT16 . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_I2C_Write_Word. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  u8Addr . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  u8DAT. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  siz. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  u8Count. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
I2C_Error. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BIT_TMP. . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
_Init_I2C. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  u32SYSCLK. . . . . . . . . . . . . .  AUTO     DATA   U_LONG   0004H  4
  u32I2CCLK. . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0004H  4
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
I2STAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
SFRS . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
SCON_1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
I2DAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
I2CLK. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
ADCCON0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
BIT. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  BIT      -----  1
I2CPX. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
UINT8. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
C51 COMPILER V9.60.7.0   I2C_M                                                             09/07/2024 15:13:49 PAGE 6   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    505    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
